#include <stdinc.hpp>

#include <loader/component_loader.hpp>
#include <utils/hook.hpp>

#include "command.hpp"
#include "key_catcher.hpp"

namespace exploit
{
    game::dvar_t* cl_exploit;

    void cl_netchan_transmit_stub(int a1, unsigned char* data, int size)
    {
        if (cl_exploit->current.enabled)
        {
            data[1] = 0xAA;
            data[8] = 0x80;
        }

        reinterpret_cast<void (*)(int, unsigned char*, int)>(0x4400E0)(a1, data, size);
    }

    class component final : public component_interface
    {
    public:
        void post_unpack() override
        {
            cl_exploit = game::Dvar_RegisterBool("cl_exploit", false, game::DVAR_FLAG_NONE, "Enable server freezer");

            add_exploit_commands();
            add_key_hooks();

            utils::hook::call(0x420E40, cl_netchan_transmit_stub);
        }

    private:
        static void add_key_hooks()
        {
            key_catcher::on_key_press("O", [](const game::LocalClientNum_t&)
            {
                command::execute("exploit");
            });

            key_catcher::on_key_press("L", [](const game::LocalClientNum_t&)
            {
                command::execute("undo_exploit");
            });

            key_catcher::on_key_press("K", [](const game::LocalClientNum_t&)
            {
                command::execute("disconnect");
            });
        }

        static void add_exploit_commands()
        {
            command::add("exploit", [](const command::params&)
            {
                game::Dvar_SetBool(cl_exploit, true);
            });

            command::add("undo_exploit", [](const command::params&)
            {
                game::Dvar_SetBool(cl_exploit, false);
            });
        }
    };
}

REGISTER_COMPONENT(exploit::component)
